// Copyright (c) Leonardo Brugnara
// Full copyright and license information in LICENSE file

using System;
using System.Collections.Generic;

namespace DmlCli.Clap
{
    /// <summary>
    /// The Command Line Argument Parser environment provides basic functionality
    /// and expose hooks in the parsing's life cycle
    /// </summary>
    /// <typeparam name="TEnvironment"></typeparam>
    public abstract class ClapEnvironment<TEnvironment> where TEnvironment : ClapEnvironment<TEnvironment>
    {
        /// <summary>
        /// Flag to track if the user has requested to see the help message
        /// </summary>
        protected bool showHelp;

        /// <summary>
        /// If true, the validations will be skipped
        /// </summary>
        protected bool disableValidation;        

        public ClapEnvironment(Parameters<TEnvironment> parameters)
        {
            this.Parameters = parameters;
            this.Errors = new List<string>();
        }

        /// <summary>
        /// Parameters this environment expects as valid parameters
        /// </summary>
        private Parameters<TEnvironment> Parameters { get; set; }

        /// <summary>
        /// If true, the environment has an invalid state that resulted from
        /// the argument parsing
        /// </summary>
        public bool Error { get; set; }

        /// <summary>
        /// List of errors generated in the parsing process
        /// </summary>
        public List<string> Errors { get; set; }

        /// <summary>
        /// Parse the array of strings as the environment's arguments
        /// </summary>
        /// <param name="args">Arguments</param>
        /// <returns>True if the parsing succeeded</returns>
        public bool Parse(string[] args)
        {
            bool parsingSucceeded = Parameters.Parse(this as TEnvironment, args);
            if (parsingSucceeded)
            {
                this.ValidateParameters();
            }
            return parsingSucceeded;
        }

        /// <summary>
        /// Returns the help message generated by the current <see cref="Parameters"/> list
        /// </summary>
        /// <returns>Help message</returns>
        public string GetHelpMessage()
        {
            return Parameters.GetHelpMessage();
        }

        /// <summary>
        /// Checks if the help message has been requested or an invalid parsing resulted
        /// in it being shown
        /// </summary>
        /// <returns></returns>
        public bool IsHelpMessageRequest()
        {
            return showHelp;
        }

        /// <summary>
        /// Sets the <see cref="showHelp"/> as true to mark that the user has
        /// requested the help message, or the parsing resulted in it being shown
        /// </summary>
        public void RequestHelpMessage()
        {
            showHelp = true;
        }

        public void DisableValidation()
        {
            disableValidation = true;
        }

        public void EnableValidation()
        {
            disableValidation = false;
        }

        /// <summary>
        /// Process the different hooks to get the errors and then
        /// send them out to the <see cref="OnShowErrorMessage"/>
        /// </summary>
        public void ShowErrorMessage()
        {
            List<string> errors = new List<string>();

            string beforeerrors = this.OnBeforeErrorMessages();

            foreach (string err in Errors)
            {
                string beforeerror = this.OnBeforeErrorMessage();
                string error = this.OnErrorMessage(err);
                string aftererror = this.OnAfterErrorMessage();

                errors.Add(beforeerror + error + aftererror);
            }

            string aftererrors = this.OnAfterErrorMessages();

            this.OnShowErrorMessage(beforeerrors + string.Join("\n", errors) + aftererrors);
        }

        /// <summary>
        /// Called before processing all the errors
        /// </summary>
        /// <returns></returns>
        protected virtual string OnBeforeErrorMessages()
        {
            return "";
        }

        /// <summary>
        /// Called before each error
        /// </summary>
        /// <returns></returns>
        protected virtual string OnBeforeErrorMessage()
        {
            return "";
        }

        /// <summary>
        /// Called to get each error
        /// </summary>
        /// <param name="error"></param>
        /// <returns></returns>
        protected virtual string OnErrorMessage(string error)
        {
            return error;
        }

        /// <summary>
        /// Called after each error
        /// </summary>
        /// <returns></returns>
        protected virtual string OnAfterErrorMessage()
        {
            return "";
        }

        /// <summary>
        /// Called after processing all errors
        /// </summary>
        /// <returns></returns>
        protected virtual string OnAfterErrorMessages()
        {
            return "";
        }

        /// <summary>
        /// Outputs the error message to the console's output
        /// </summary>
        /// <param name="error"></param>
        protected virtual void OnShowErrorMessage(string error)
        {
            Console.WriteLine(error);
        }

        /// <summary>
        /// Processes and shows the help message
        /// </summary>
        public void ShowHelpMessage()
        {
            string beforehelp = this.OnBeforeHelpMessage();
            string help = this.OnHelpMessage(Parameters.GetHelpMessage());
            string afterhelp = this.OnAfterHelpMessage();

            this.OnShowHelpMessage(beforehelp + help + afterhelp);
        }

        /// <summary>
        /// Called before processing the help message
        /// </summary>
        /// <returns></returns>
        protected virtual string OnBeforeHelpMessage()
        {
            return "";
        }

        /// <summary>
        /// Returns the help message
        /// </summary>
        /// <param name="help"></param>
        /// <returns></returns>
        protected virtual string OnHelpMessage(string help)
        {
            return help;
        }

        /// <summary>
        /// Called after processing the help message
        /// </summary>
        /// <returns></returns>
        protected virtual string OnAfterHelpMessage()
        {
            return "";
        }

        /// <summary>
        /// Outputs the help message to the console's output
        /// </summary>
        /// <param name="help"></param>
        protected virtual void OnShowHelpMessage(string help)
        {
            Console.WriteLine(help);
        }

        public abstract void ValidateParameters();
    }
}